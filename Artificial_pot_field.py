#Artificial Potential function
import math
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm





def pot_func_generation(init_pos, final_pos):
   
    
    # #Parabolic Function: Quadratic basically 
    A = np.array([[2*(init_pos[0]-final_pos[0]),0],[0,2*(init_pos[1]-final_pos[1])]])
    C = np.array([[-50],[-20]]) # The Value of gradient X and Y respectively
    
    # P = np.array([[-500000],[-500000]])
    
    #Cubic Function: Gives smoother curve than parabolic
    # A = np.array([[3*(init_pos[0]-final_pos[0])**2,0],[0,3*(init_pos[1]-final_pos[1])**2]])
    # C = np.array([[-5],[-2]])
    
    # return(np.linalg.solve(A,C))
    return np.linalg.solve(A,C)#, P
    
    


def coord_generation(a,b,nodes,final_pos):#obstacle,P):
    X = []
    Y = []
    # Z_obst = []
    
    for i in nodes:
        
        # if i ==(o for o in obstacle):
        #     Z_obst.append(P[0]*(np.array([i[0]])) + P[1]*(np.array([i[1]]))) 
        
        # else:    
            # X.append(i[0])
            # Y.append(i[1])
            
          X.append(i[0])
          Y.append(i[1])
          
          
    # Z = a*(np.array([X])**3) + b*(np.array([Y])**3)
          
    # Z = np.sqrt((np.array([X])-np.array([final_pos[0]]))**2+(np.array([Y])-np.array([final_pos[1]]))**2)
    
    # Z = a*(np.array([X])-np.array([final_pos[0]]))**3+b*(np.array([Y])-np.array([final_pos[1]]))**3
    
    Z = a*(np.array([X])-np.array([final_pos[0]]))**2+b*(np.array([Y])-np.array([final_pos[1]]))**2
    
    # for obs in obstacle:
    #     Z_obst.append(list(P[0]*(np.array([obs[0]])) + P[1]*(np.array([obs[1]]))))
    # print(Z)
    
    Z = list(Z[0])
    
    # Z.append(Z_obst)
    # Z.pop()
    
    return X,Y,Z





if __name__ == "__main__":
    
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    
    
    nodes = [[0, 0], [0, 56], [0, 112], [0, 168], [0, 224], [0, 280], [0, 336], [0, 392], [0, 448], [0, 504], [0, 560], [0, 616], [0, 672], [0, 728], [0, 784], [0, 840], [0, 896], [0, 952], [0, 1008], [0, 1064], [0, 0], [56, 0], [56, 56], [56, 112], [56, 168], [56, 224], [56, 280], [56, 336], [56, 392], [56, 448], [56, 504], [56, 560], [56, 616], [56, 672], [56, 728], [56, 784], [56, 840], [56, 896], [56, 952], [56, 1008], [56, 1064], [56, 56], [112, 0], [112, 56], [112, 112], [112, 168], [112, 224], [112, 280], [112, 336], [112, 392], [112, 448], [112, 504], [112, 560], [112, 616], [112, 672], [112, 728], [112, 784], [112, 840], [112, 896], [112, 952], [112, 1008], [112, 1064], [112, 112], [168, 0], [168, 56], [168, 112], [168, 168], [168, 224], [168, 280], [168, 336], [168, 392], [168, 448], [168, 504], [168, 560], [168, 616], [168, 672], [168, 728], [168, 784], [168, 840], [168, 896], [168, 952], [168, 1008], [168, 1064], [168, 168], [224, 0], [224, 56], [224, 112], [224, 168], [224, 224], [224, 280], [224, 336], [224, 392], [224, 448], [224, 504], [224, 560], [224, 616], [224, 672], [224, 728], [224, 784], [224, 840], [224, 896], [224, 952], [224, 1008], [224, 1064], [224, 224], [280, 0], [280, 56], [280, 112], [280, 168], [280, 224], [280, 280], [280, 336], [280, 392], [280, 448], [280, 504], [280, 560], [280, 616], [280, 672], [280, 728], [280, 784], [280, 840], [280, 896], [280, 952], [280, 1008], [280, 1064], [280, 280], [336, 0], [336, 56], [336, 112], [336, 168], [336, 224], [336, 280], [336, 336], [336, 392], [336, 448], [336, 504], [336, 560], [336, 616], [336, 672], [336, 728], [336, 784], [336, 840], [336, 896], [336, 952], [336, 1008], [336, 1064], [336, 336], [392, 0], [392, 56], [392, 112], [392, 168], [392, 224], [392, 280], [392, 336], [392, 392], [392, 448], [392, 504], [392, 560], [392, 616], [392, 672], [392, 728], [392, 784], [392, 840], [392, 896], [392, 952], [392, 1008], [392, 1064], [392, 392], [448, 0], [448, 56], [448, 112], [448, 168], [448, 224], [448, 280], [448, 336], [448, 392], [448, 448], [448, 504], [448, 560], [448, 616], [448, 672], [448, 728], [448, 784], [448, 840], [448, 896], [448, 952], [448, 1008], [448, 1064], [448, 448], [504, 0], [504, 56], [504, 112], [504, 168], [504, 224], [504, 280], [504, 336], [504, 392], [504, 448], [504, 504], [504, 560], [504, 616], [504, 672], [504, 728], [504, 784], [504, 840], [504, 896], [504, 952], [504, 1008], [504, 1064], [504, 504], [560, 0], [560, 56], [560, 112], [560, 168], [560, 224], [560, 280], [560, 336], [560, 392], [560, 448], [560, 504], [560, 560], [560, 616], [560, 672], [560, 728], [560, 784], [560, 840], [560, 896], [560, 952], [560, 1008], [560, 1064], [560, 560], [616, 0], [616, 56], [616, 112], [616, 168], [616, 224], [616, 280], [616, 336], [616, 392], [616, 448], [616, 504], [616, 560], [616, 616], [616, 672], [616, 728], [616, 784], [616, 840], [616, 896], [616, 952], [616, 1008], [616, 1064], [616, 616], [672, 0], [672, 56], [672, 112], [672, 168], [672, 224], [672, 280], [672, 336], [672, 392], [672, 448], [672, 504], [672, 560], [672, 616], [672, 672], [672, 728], [672, 784], [672, 840], [672, 896], [672, 952], [672, 1008], [672, 1064], [672, 672], [728, 0], [728, 56], [728, 112], [728, 168], [728, 224], [728, 280], [728, 336], [728, 392], [728, 448], [728, 504], [728, 560], [728, 616], [728, 672], [728, 728], [728, 784], [728, 840], [728, 896], [728, 952], [728, 1008], [728, 1064], [728, 728], [784, 0], [784, 56], [784, 112], [784, 168], [784, 224], [784, 280], [784, 336], [784, 392], [784, 448], [784, 504], [784, 560], [784, 616], [784, 672], [784, 728], [784, 784], [784, 840], [784, 896], [784, 952], [784, 1008], [784, 1064], [784, 784], [840, 0], [840, 56], [840, 112], [840, 168], [840, 224], [840, 280], [840, 336], [840, 392], [840, 448], [840, 504], [840, 560], [840, 616], [840, 672], [840, 728], [840, 784], [840, 840], [840, 896], [840, 952], [840, 1008], [840, 1064], [840, 840], [896, 0], [896, 56], [896, 112], [896, 168], [896, 224], [896, 280], [896, 336], [896, 392], [896, 448], [896, 504], [896, 560], [896, 616], [896, 672], [896, 728], [896, 784], [896, 840], [896, 896], [896, 952], [896, 1008], [896, 1064], [896, 896], [952, 0], [952, 56], [952, 112], [952, 168], [952, 224], [952, 280], [952, 336], [952, 392], [952, 448], [952, 504], [952, 560], [952, 616], [952, 672], [952, 728], [952, 784], [952, 840], [952, 896], [952, 952], [952, 1008], [952, 1064], [952, 952], [1008, 0], [1008, 56], [1008, 112], [1008, 168], [1008, 224], [1008, 280], [1008, 336], [1008, 392], [1008, 448], [1008, 504], [1008, 560], [1008, 616], [1008, 672], [1008, 728], [1008, 784], [1008, 840], [1008, 896], [1008, 952], [1008, 1008], [1008, 1064], [1008, 1008], [1064, 0], [1064, 56], [1064, 112], [1064, 168], [1064, 224], [1064, 280], [1064, 336], [1064, 392], [1064, 448], [1064, 504], [1064, 560], [1064, 616], [1064, 672], [1064, 728], [1064, 784], [1064, 840], [1064, 896], [1064, 952], [1064, 1008], [1064, 1064], [1064, 1064]]
    # print(nodes)
    init_pos = [0, 0]
    final_pos = [336, 560]
    # obstacle = [[336,616],[560, 392], [560, 448], [560, 504],[280, 56], [280, 112], [280, 168]]
    
    coeff= pot_func_generation(init_pos,final_pos)
    a = coeff[0][0]
    b = coeff[1][0]
    
    X,Y,Z = coord_generation(a,b,nodes,final_pos)#obstacle,P)
    print("Obtained the Coords !")
    surf = ax.plot_trisurf(X, Y, Z, cmap=cm.jet, linewidth=0.1)
    # ax.scatter(X,Y,Z,color = 'r')
    
    # X,Y = np.meshgrid(np.array([X]),np.array([Y]))
    # Z = np.array([Z]).reshape(np.array([X]).shape)
    # ax.plot_surface(X,Y,Z)